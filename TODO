-class simulator.Simulator:
    --contains an instance of a Computer
    --connectStreamTo[Registers, Memory, Logs, Src, Terminal]
-OK-class instructions.Intruction(String name, int bin, bool memory, bool indirect, String descryption)
-OK-abstract class instructions.InstructionSet:
    --abstract initInstructionSet: create instructions
	  --map names to Instructions for assembly
	  --map bins to Instructions for disassembly
-OK-class assembler.Assembler:
    --everthing is static here, assemble and disassemble need an instance of InstructionSet.
-OK-class simulator.Computer:
    --copy ComputerAbstract
    --getInstructionSet
-class simulator.Memory:
    --can take a map of labels (int to string)
class ui.Console:
    --takes a Simulator, input and output streams
    --works as a commandline interface, can be connected to any of the Simulator streams
-class Main:
    --in all cases multiple the actual ui interacts with multiple instances of UIService.
    --1- GUI: swing, use GTK is possible
    --2- CLI: normal
    --3- CLI: over server: a shell script will be needed: SCS starts a server on a free port and return the port. the script start a tmux session with multiple panels and windows every one of them has a connection with the server for diffrent streams (registers, memory, ...). Also, one panel opens a text editor (user-selected -> emacs -> vim -> nano -> just-print).
    --4- Android: just create an android project that intefaces with UIService
-class Updater:
    -just download the latest and don't delete or do anything fancy..

-create a flatpak

tmux example:
```
tmux new-session -d -s sss -n win
tmux send-keys -t sss:win "echo 1st" Enter
tmux split-window -v -t sss:win 
tmux send-keys -t sss:win "echo 2nd" Enter
tmux split-window -h -t sss:win 
tmux send-keys -t sss:win "echo 3rd" Enter
tmux attach -t sss:win
```

