package ui;

import java.io.BufferedReader;
import java.io.PrintWriter;

import computer.ComputerAbstract;

public class UIService {
    
    public UIService(ComputerAbstract c, BufferedReader in, PrintWriter out) {

	String[] args;
	while (true) {
	    args = in.readLine().split("\s+");
	    switch (args[0]) {
	    case "registers":
		//c.connectOnUpdate();
/* TODO: 

-class Simulator:
    --contains an instance of a simulator
    --connectStreamTo[Registers, Memory, Logs, Src, Terminal]
-class ComputerAbstract:
    --rename to Computer
    --abstract initInstructionSet:
        ---Intruction(String name, int bin, bool psudo, bool memory, bool indirect, String descryption)
	---map names to Instructions for assembly
	---map bins to Instructions for disassembly
	---put that on class IntructionSet and pass it to the assembler.
-class Assembler:
    --everthing is static here, assemble and disassemble need an instance of InstructionSet.
-class Memory:
    --can take a map of labels (int to string)
class UIService:
    --takes a Simulator, input and output streams
    --works as a commandline interface, can be connected to any of the Simulator streams
-class Main:
    --in all cases multiple the actual ui interacts with multiple instances of UIService.
    --1- GUI: swing
    --2- CLI: normal
    --3- CLI: over server: a shell script will be needed: SCS starts a server on a free port and return the port. the script start a tmux session with multiple panels and windows every one of them has a connection with the server for diffrent streams (registers, memory, ...). Also, one panel opens a text editor (user-selected -> emacs -> vim -> nano -> just-print).
    --4- Android: just create an android project that intefaces with UIService
-class Updater:
    -just download the latest and don't delete or do anything fancy..

-create a flatpak

*/
	    }
	}
	
    }

}










